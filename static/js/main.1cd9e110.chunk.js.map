{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PokemonRow","props","pokemonProp","name","english","japanese","type","join","App","useState","keyfilter","keyfilterSet","style","margin","padding","border","className","value","onChange","event","target","display","gridTemplateColumns","gridColumnGap","pokemons","filter","pokemon","toLocaleLowerCase","includes","slice","map","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"y+hMAKMA,EAAa,SAACC,GAAW,IACrBC,EAAgBD,EAAhBC,YACV,OACE,+BACE,6BAAKA,EAAYC,KAAKC,UACtB,6BAAKF,EAAYC,KAAKE,WACtB,6BAAKH,EAAYI,KAAKC,KAAK,SAC3B,6BACE,kDAsDSC,MAjDf,WAAe,MAEqBC,mBAAS,IAF9B,mBAENC,EAFM,KAEKC,EAFL,KAIb,OACE,sBACEC,MAAO,CACLC,OAAQ,OACRC,QAAS,UACTC,OAAQ,aAJZ,UAME,oBAAIC,UAAU,QAAd,8BACA,uBACEV,KAAK,OACLW,MAAOP,EACPQ,SAAU,SAACC,GAAD,OAAWR,EAAaQ,EAAMC,OAAOH,UAEjD,qBACEL,MAAO,CACLS,QAAS,OACTC,oBAAqB,UACrBC,cAAe,QAJnB,SAME,kCACE,gCACE,+BACE,sCACA,6CACA,2CAGJ,gCACGC,EACEC,QAAO,SAACC,GAAD,OACNA,EAAQvB,KAAKC,QACVuB,oBACAC,SAASlB,EAAUiB,wBAEvBE,MAAM,EAAG,IACTC,KAAI,SAACJ,GAAD,OACH,cAAC,EAAD,CAAYxB,YAAawB,GAAcA,EAAQK,kBC9ChDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1cd9e110.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './App.css'\r\nimport pokemons from './pokemons.json'\r\n\r\n// function component\r\nconst PokemonRow = (props) => {\r\n  const { pokemonProp } = props\r\nreturn (\r\n  <tr>\r\n    <td>{pokemonProp.name.english}</td>\r\n    <td>{pokemonProp.name.japanese}</td>\r\n    <td>{pokemonProp.type.join(' & ')}</td>\r\n    <td>\r\n      <button>Select</button>\r\n    </td>\r\n  </tr>\r\n)}\r\n\r\nfunction App() {\r\n  // states\r\n  const [keyfilter, keyfilterSet] = useState('')\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        margin: 'auto',\r\n        padding: '0.75rem',\r\n        border: '1px solid',\r\n      }}>\r\n      <h1 className='title'>Search a pokemon</h1>\r\n      <input\r\n        type='text'\r\n        value={keyfilter}\r\n        onChange={(event) => keyfilterSet(event.target.value)}\r\n      />\r\n      <div\r\n        style={{\r\n          display: 'grid',\r\n          gridTemplateColumns: '70% 30%',\r\n          gridColumnGap: '1rem',\r\n        }}>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>In japanese</th>\r\n              <th>Type</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {pokemons\r\n              .filter((pokemon) =>\r\n                pokemon.name.english\r\n                  .toLocaleLowerCase()\r\n                  .includes(keyfilter.toLocaleLowerCase()),\r\n              )\r\n              .slice(0, 30)\r\n              .map((pokemon) => (\r\n                <PokemonRow pokemonProp={pokemon} key={pokemon.id} />\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}