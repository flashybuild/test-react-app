{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PokemonRow","props","pokemonProp","handleSelect","name","english","japanese","type","join","onClick","PokemonInfo","selectedPk","Object","keys","base","map","key","App","useState","keyfilter","keyfilterSet","selectedPokemon","selectedPokemonSet","style","margin","padding","border","className","value","onChange","event","target","display","gridTemplateColumns","gridColumnGap","pokemons","filter","pokemon","toLocaleLowerCase","includes","slice","poPp","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"y+hMAKMA,EAAa,SAACC,GAAW,IACrBC,EAA8BD,EAA9BC,YAAaC,EAAiBF,EAAjBE,aACrB,OACE,+BACE,6BAAKD,EAAYE,KAAKC,UACtB,6BAAKH,EAAYE,KAAKE,WACtB,6BAAKJ,EAAYK,KAAKC,KAAK,SAC3B,6BACE,wBAAQC,QAAS,kBAAMN,EAAaD,IAApC,0BAMFQ,EAAc,SAACT,GAAW,IACtBU,EAAeV,EAAfU,WAER,OACE,gCACE,6BAAKA,EAAWP,KAAKC,UACpB,gCACE,gCACAO,OAAOC,KAAKF,EAAWG,MAAMC,KAAI,SAACC,GAAD,OAChC,+BACE,6BAAKA,IACL,6BAAKL,EAAWG,KAAKE,OAFdA,cAkEJC,MAvDf,WAAe,MAEqBC,mBAAS,IAF9B,mBAENC,EAFM,KAEKC,EAFL,OAGiCF,mBAAS,MAH1C,mBAGNG,EAHM,KAGWC,EAHX,KAIb,OACE,sBACEC,MAAO,CACLC,OAAQ,OACRC,QAAS,UACTC,OAAQ,aAJZ,UAME,oBAAIC,UAAU,QAAd,8BACA,uBACEpB,KAAK,OACLqB,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAWV,EAAaU,EAAMC,OAAOH,UAGjD,sBACEL,MAAO,CACLS,QAAS,OACTC,oBAAqB,UACrBC,cAAe,QAJnB,UAME,kCACE,gCACE,+BACE,sCACA,6CACA,2CAGJ,gCACGC,EACEC,QAAO,SAACC,GAAD,OACNA,EAAQjC,KAAKC,QACViC,oBACAC,SAASpB,EAAUmB,wBAEvBE,MAAM,EAAG,IACTzB,KAAI,SAACsB,GAAD,OACH,cAAC,EAAD,CACEnC,YAAamC,EACblC,aAAc,SAACsC,GAAD,OAAUnB,EAAmBmB,KACtCJ,EAAQK,YAKtBrB,GAAmB,cAAC,EAAD,CAAaV,WAAYU,WC5EtCsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5d0e547a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './App.css'\r\nimport pokemons from './pokemons.json'\r\n\r\n// function component\r\nconst PokemonRow = (props) => {\r\n  const { pokemonProp, handleSelect } = props\r\n  return (\r\n    <tr>\r\n      <td>{pokemonProp.name.english}</td>\r\n      <td>{pokemonProp.name.japanese}</td>\r\n      <td>{pokemonProp.type.join(' & ')}</td>\r\n      <td>\r\n        <button onClick={() => handleSelect(pokemonProp)}>Select</button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nconst PokemonInfo = (props) => {\r\n  const { selectedPk } = props\r\n\r\n  return (\r\n    <div>\r\n      <h2>{selectedPk.name.english}</h2>\r\n       <table>\r\n         <tbody>\r\n        {Object.keys(selectedPk.base).map((key) => (\r\n          <tr key={key}>\r\n            <td>{key}</td>\r\n            <td>{selectedPk.base[key]}</td>\r\n          </tr>\r\n        ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n  // states\r\n  const [keyfilter, keyfilterSet] = useState('')\r\n  const [selectedPokemon, selectedPokemonSet] = useState(null)\r\n  return (\r\n    <div\r\n      style={{\r\n        margin: 'auto',\r\n        padding: '0.75rem',\r\n        border: '1px solid',\r\n      }}>\r\n      <h1 className='title'>Search a pokemon</h1>\r\n      <input\r\n        type='text'\r\n        value={keyfilter}\r\n        onChange={(event) => keyfilterSet(event.target.value)}\r\n      />\r\n\r\n      <div\r\n        style={{\r\n          display: 'grid',\r\n          gridTemplateColumns: '70% 30%',\r\n          gridColumnGap: '1rem',\r\n        }}>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>In japanese</th>\r\n              <th>Type</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {pokemons\r\n              .filter((pokemon) =>\r\n                pokemon.name.english\r\n                  .toLocaleLowerCase()\r\n                  .includes(keyfilter.toLocaleLowerCase()),\r\n              )\r\n              .slice(0, 30)\r\n              .map((pokemon) => (\r\n                <PokemonRow\r\n                  pokemonProp={pokemon}\r\n                  handleSelect={(poPp) => selectedPokemonSet(poPp)}\r\n                  key={pokemon.id}\r\n                />\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n        {selectedPokemon && <PokemonInfo selectedPk={selectedPokemon} />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}