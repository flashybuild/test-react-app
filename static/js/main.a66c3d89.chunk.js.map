{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PokemonRow","props","pokemonProp","handleSelect","name","english","className","japanese","type","join","onClick","PokemonInfo","selectedPk","listItems","undefined","number","Object","keys","base","map","key","App","useState","keyfilter","keyfilterSet","selectedPokemon","selectedPokemonSet","style","margin","padding","border","value","onChange","event","target","pokemons","filter","pokemon","toLocaleLowerCase","includes","slice","poPp","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"y+hMAKMA,EAAa,SAACC,GAAW,IACrBC,EAA8BD,EAA9BC,YAAaC,EAAiBF,EAAjBE,aACrB,OACE,+BACE,6BAAKD,EAAYE,KAAKC,UACtB,oBAAIC,UAAU,OAAd,SAAsBJ,EAAYE,KAAKG,WACvC,6BAAKL,EAAYM,KAAKC,KAAK,SAC3B,6BACE,wBAAQC,QAAS,kBAAMP,EAAaD,IAApC,0BAMFS,EAAc,SAACV,GAKnB,IAL8B,IACtBW,EAAeX,EAAfW,WAGJC,OAAYC,EAChB,MAHgB,CAAC,EAAG,EAAG,EAAG,EAAG,GAG7B,eAA4B,CAAvB,IAAIC,EAAM,KACbF,EAAY,6BAAKE,IAGnB,OACE,gCACE,6BAAKH,EAAWR,KAAKC,UACrB,6BAAKQ,IACL,gCACE,gCACGG,OAAOC,KAAKL,EAAWM,MAAMC,KAAI,SAACC,GAAD,OAChC,+BACE,6BAAKA,IACL,6BAAKR,EAAWM,KAAKE,OAFdA,cA6DNC,MAlDf,WAAe,MAEqBC,mBAAS,IAF9B,mBAENC,EAFM,KAEKC,EAFL,OAGiCF,mBAAS,MAH1C,mBAGNG,EAHM,KAGWC,EAHX,KAIb,OACE,sBACEC,MAAO,CACLC,OAAQ,OACRC,QAAS,UACTC,OAAQ,aAJZ,UAME,oBAAIxB,UAAU,QAAd,8BACA,uBACEE,KAAK,OACLuB,MAAOR,EACPS,SAAU,SAACC,GAAD,OAAWT,EAAaS,EAAMC,OAAOH,UAGjD,sBAAKzB,UAAU,YAAf,UACE,kCACE,gCACE,+BACE,sCACA,oBAAIA,UAAU,OAAd,yBACA,2CAGJ,gCACG6B,EACEC,QAAO,SAACC,GAAD,OACNA,EAAQjC,KAAKC,QACViC,oBACAC,SAAShB,EAAUe,wBAEvBE,MAAM,EAAG,IACTrB,KAAI,SAACkB,GAAD,OACH,cAAC,EAAD,CACEnC,YAAamC,EACblC,aAAc,SAACsC,GAAD,OAAUf,EAAmBe,KACtCJ,EAAQK,YAKtBjB,GAAmB,cAAC,EAAD,CAAab,WAAYa,WC9EtCkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a66c3d89.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './App.css'\r\nimport pokemons from './pokemons.json'\r\n\r\n// function component\r\nconst PokemonRow = (props) => {\r\n  const { pokemonProp, handleSelect } = props\r\n  return (\r\n    <tr>\r\n      <td>{pokemonProp.name.english}</td>\r\n      <td className='japa'>{pokemonProp.name.japanese}</td>\r\n      <td>{pokemonProp.type.join(' & ')}</td>\r\n      <td>\r\n        <button onClick={() => handleSelect(pokemonProp)}>Select</button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nconst PokemonInfo = (props) => {\r\n  const { selectedPk } = props\r\n  const numbers = [1, 2, 3, 4, 5]\r\n  // const listItems = numbers.map((number) => <li>{number}</li>)\r\n  let listItems = undefined\r\n  for (let number of numbers) {\r\n    listItems = <li>{number}</li>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>{selectedPk.name.english}</h2>\r\n      <ul>{listItems}</ul>\r\n      <table>\r\n        <tbody>\r\n          {Object.keys(selectedPk.base).map((key) => (\r\n            <tr key={key}>\r\n              <td>{key}</td>\r\n              <td>{selectedPk.base[key]}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n  // states\r\n  const [keyfilter, keyfilterSet] = useState('')\r\n  const [selectedPokemon, selectedPokemonSet] = useState(null)\r\n  return (\r\n    <div\r\n      style={{\r\n        margin: 'auto',\r\n        padding: '0.75rem',\r\n        border: '1px solid',\r\n      }}>\r\n      <h1 className='title'>Search a pokemon</h1>\r\n      <input\r\n        type='text'\r\n        value={keyfilter}\r\n        onChange={(event) => keyfilterSet(event.target.value)}\r\n      />\r\n\r\n      <div className='container'>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th className='japa'>In japanese</th>\r\n              <th>Type</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {pokemons\r\n              .filter((pokemon) =>\r\n                pokemon.name.english\r\n                  .toLocaleLowerCase()\r\n                  .includes(keyfilter.toLocaleLowerCase()),\r\n              )\r\n              .slice(0, 10)\r\n              .map((pokemon) => (\r\n                <PokemonRow\r\n                  pokemonProp={pokemon}\r\n                  handleSelect={(poPp) => selectedPokemonSet(poPp)}\r\n                  key={pokemon.id}\r\n                />\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n        {selectedPokemon && <PokemonInfo selectedPk={selectedPokemon} />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}